Za svaku funkciju / metodu obavezno proveriti u kojoj verziji je dostupna i da li je doslo do nekih promena.

Xampp - ima podrsku web servera (apache) kao i baze podataka (mysql)
Uvek se instalira u rootu foldera (C)
Ukoliko se desi da stane da radi, mozemo samo promeniti naziv foldera, dodati neki broj, a zatim ponovo instalirati novi (naziv xampp je uvek glavni)

Pokrecemo xampp-control i startujemo apache i mysql
Apache radi na portu 80 (443)
Mysql radi na portu 3306
Ukoliko se desi da ne moze da se startuje, verovatno jos neka aplikacija radi na tom portu, pa je potrebno ili iskljuciti drugi program ili promeniti port na drugom programu ili na Apache

Promena porta na Apache
Ide se na config, pa trazimo ServerName localhost: 80
Umesto 80 upisujemo neki drugi port, npr 777

Preporuka je ne menjati ovo, vec samo iskljuciti drugi problem

Svi nasi sajtovi ce biti smesteni u root folderu htdocs

Sada sajt necemo pokretati dvoklikom, vec moramo u browseru kucati lokalnu adresu web servera i putanju do fajla
Lokalna adresa servera je 127.0.0.1 ili localhost

Preporuka je na pocetku rada uvek ispisati funkciju phpinfo()

echo "<p>Osnove php</p>"; - ispis

$ime = "Lazar"; - definisanje promenljive
var_dump($ime); - naziv, tip, vrednost

echo "<p>Moje ime je $ime.</p>";
echo "<p>Moje ime je ".$ime.".</p>"; - konkatanacija

$b;
var_dump($b); - obavestenje da je undefined i nece vratiti informacije o promenljivoj

$x = 2;
$y = $x; - y = 2
$x = $x + 10; - x = 12, y = 2 (zadrzava vrednost koju smo joj dodelili pre)
$y = &$x; - y = 12

$proizvod = "telefon";
$$prizovd = "samsung"; - $telefon = "samsung"

$x = 10;
$y = "13P";
$z = true;
$a;
$b = "tekst";
$c = NULL;
$d = 65.23;
$e = "P14";

$rez = $x * $y; - 130
$rez = $x * $e; - 0, warning, ukoliko pocinje sa slovom uvek ga pretvara u 0, $x - $e = 10
$rez = $x + $d; - 75.23
$rez = $d - $z; - 64.23, true je pretvoreno u 1 (false 0)
$rez = $d - $c; - 65.23, vrednost za $c je prazna i zato ce ostati ista vrednost

$x = 16;
settype($x, "string");
echo gettype($x); - string
$x = (int)$x;
echo gettype($x); - int

$x = "15Lfasfa.";
settype($x, "int");
echo "$x"; - 15
echo gettype($x); - int

$x;
isset($x); - false
$x = "";
isset($x); - true
$x = NULL;
isset($x); - false

$x;
empty($x); - true
$x = "";
empty($x); - true
$x = 0;
empty($x); - true
$x = [];
empty($x); - true
$x = NULL;
empty($x); - true
$x = "0";
empty($x); - true

unset($x); - vise promenljiva ne postoji, ispraznio se memorijski prostor

----------

Svaki sajt ce se parcati na celine, na stranice, na delove sajta header, navigacija, footer

Glavna stranica ce nam biti index.php

Pravimo folder fixed i tu ce nam biti sve stvari koje ce biti zajednicke za svaku stranicu, a to su <head> sekcija, navigacija i footer

Sada uzimamo i kopiramo deo od html (od pocetka) do body pocetnog taga (ukljucujuci i njega) i sve to stavljamo u fajl sa nazivom head.php
U glavnoj stranici index.php cemo ucitati sa include taj fajl - include("fixed/head.php");

Svaka stranica ce takodje imati istu navigaciju, i sada cemo ponovo u fixed folderu, napraviti fajl nav.php i to cemo prekopirati tu
Ponovo u index.php ucitavamo taj fajl - include("fixed/nav.php");

Svaka stranica takodje ima footer, pa cemo zato ceo footer sve do kraja html, prekopirati i pasteovati u fixed i fajl footer.php
U index.php na kraju otvaramo drugi php kod i ucitavamo fajl - include("fixed/footer.php");

Od svega u index.php stranici ce ostati samo glavni sredisni deo stranice

Sada na sledecoj stranici, na primer kontakt.php, ponovo ucitavamo head.php, nav.php i footer.php, a ostavljamo glavni sredisni deo

Ukoliko postoji jos neka stvar koja se ponavlja na nekim drugim stranicama, a nije na index stranici, takodje cemo je izolovati i staviti u folder fixed i pozivati tamo gde treba

Neke stvari ce se razlikovati npr u head sekciji, kao sto je title, meta tagovi, kao i mnoge druge stvari
To cemo sve menjati i ispitivati u php u zavisnosti od toga na kojoj stranici se nalazimo prikazace se odredjeni deo

----------

-Funkcije za rad sa stringovima

Manji delovi na jednoj stranici ce se takodje deliti u manje celine koje ce se posle ucitavati
To su delovi koji su identicni za sve stranice
Primer: <head> sekcija, navigacija, footer, slider, testimonials (sve zavisi od stranice do stranice)

S obzirom da se u <head> sekciji trebaju nalaziti unikatne vrednosti za meta tagove npr, to ce se raditi tako sto cemo napraviti funkciju koja ce u zavisnosti od stranice na kojoj se nalazimo, upisivati te vrednosti

strlen($tekst) - broj karaktera

strtoupper($tekst) - sva velika slova

strtolower($tekst) - sva mala slova

strpos($tekst, "b") - pozicija karaktera u stringu, case sensitive

stripost($tekst, "b") - pozicija karaktera u stringu, ali nije case sensitive, dobra za pretragu u bazi koju nismo mi radili, pretraga na google, itd...
Isti efekat se moze dobiti ako npr koristimo strtolower(), pa onda strpos()

addslashes($tekst) - dodaje kose crte \ \

stripslasshes($tekst) - uklanja kose crte

strstr($tekst, "rec") - isecanje teksta od reci koju smo mi zadali

substr($tekst, 0, 3) - isecanje stringa od 0pozcije u duzini 3

md5($tekst) - primenjuje se md5 algoritam za sifrovanje, 32 karaktera

sha1($tekst) - primenjuje se sha1 algoritam za sifrovanje

Kada se bude radila registracija korisnika, obavezno ce se lozinka sifrovati pre upisa u bazu, obavezno u bazi definisati vecu duzinu tog polja npr varchar(32), nego sto smo definisali za regularne izraze

-Funkcije za rad sa brojevima

round($broj) - zaokruzivanje broja na najblizu celu vrednost(ukoliko je .5 onda na vecu)

ceil($broj) - zaokruzivanje na vecu vrednost

floor($broj) - zaokruzivanje na manju vrednost

rand() - slucajan ceo broj
rand($min, $max) - slucajan ceo broj u opsegu

-Nizovi

$niz = []; - definisanje niza

count($niz) - broj elemenata niza

isset($niz[2]) - da li postoji vrednost za drugi element

$niz[] = "novo"; - dodace novu vrednost na prvo slobodno mesto - poslednji element niza

array_push($niz, "novo") - dodavanje nove vrednosti na kraj niza

Pristup elementima niza:

for($i = 0; $i < count($niz); $i++) { echo $niz[$i]; }

foreach($niz as $element) { echo $element; }

foreach($niz as $key => $value) { echo "Indeks:" . $key . "Vrednost: " . $value}

if(in_array("nesto", $niz)) {} - da li se neka vrednost nalazi u nizu

$novNiz = array_unique($niz) - vraca novi filtrirani niz, koji ce imati jedinstvene vrednosti bez obzira na tip podataka

array_count_values() - kao rezultat ce vratiti asocijativni filtrirani niz, koji ce kao indeks imati naziv, a kao vrednost ce imati koliko se puta ta vrednost ponavlja

$niz = { "ime" => "Lazar", "prezime" => "Jankovic" } - asocijativni niz (objekat)

$niz = { 0 => ["ime" => "Lazar, "prezime" => "Jankovic],
	1 => ["ime" => "Ana", "prezime" => "Jankovic"] } - multidimenzionalni niz (niz obj)

Prvo trebamo proveriti da niz nije prazan, pa tek onda stampati vrednosti

if(count($niz) != 0) { // prvo otvaramo <table> i <tr> za naslove
			// posle ponovo otvaramo php i sa foreach ispisujemo }
else { // ne postoje ti elementi }

$string = implode(",", $niz); - razdvajamo elemente niza u stringove

$niz = explode(" ", $string); - string spajamo u jedan niz, a elemnti ce biti stringovi koji su razdvojeni separatorom

----------

-Funkcije

function ispis() { echo "ispis"; } - funkcija bez parametara za ispisivanje, klasican poziv

function ispis() { return "ispis"; } - funkcija bez parametara, ali sada imamo return, pa se funkcija pri pozivu nece inicijalno ispisati, vec ce vratiti rezultat "ispis", zato njen poziv trebamo da smestimo u promenljivu

function zbir($a, $b) { return $a + $b; } - funkcija sa parametrima, poziv se treba smestiti u novu promenljivu, dobro je definisati i inicijalne vrednosti parametara u slucaju da se ne proslede

define("PI", 3.14); - definisanje konstante

function povrsinaKruga($r) { return pow($r, 2) * PI; } - funkcija za izracunavanje povrsine kruga

-Scope

Primer:
Bice greska, jer funkcija ne moze da vidi promenljivu

$ime = "Lazar";
function ispis() { echo $ime; }
ispis();

Primer:
Nece biti greske, prosledili smo parametar ime

$ime = "Lazar";
function ispis($parametarIme) { echo $parametarIme; }
ispis($ime);

Primer:
Nece biti greske, jer smo promenljivu nacinili globalnom, to smo definisali unutar funkcije

$ime = "Lazar";
function ispis() { global $ime; echo $ime; }
ispis();

Primer:
Bice greske, jer se global definise unutar te funkcije/scope gde zelimo da koristimo tu promenljivu

$ime = "Lazar";
global $ime;
function ispis() { echo $ime; }
ispis();

Kada se bude radilo sa bazom:

$konekcija = "konekcija sa bazom";
function upis() { global $konekcija; //.... }

-Super globalne promenljive

$_SERVER - niz od 48 elemenata, informacije o serveru, ip adresa, trenutna stranica

Jedan od elemenata je PHP_SELF koji vraca trenutnu stranicu/putanju, i kada dohvatimo trenutnu stranicu, moci cemo dinamicki da upisujemo neke informacije, kao sto su title i meta tagovi u <head> sekciji

$_GET - dohvata podatke koji su prosledjeni kroz url adresu
Podaci se mogu preneti i kroz obican <a> link, npr:

<a href="stranica.php=$ime=Lazar">Stranica PHP</a>

Primer: 
Prvo proveravamo da li postoji ta vrednost koju smo dohvatili sa $_GET, pa ako postoji radicemo nesto dalje

if(isset($_GET["ime"])) { echo $ime; }

Prenos preko forme
U action atributu cemo definisati php stranicu, u method atributu cemo definisati GET/POST metod
Svaki element treba imati name atribut preko kojeg cemo pristupati tom elemntu u php
Trebamo imati jedno submit dugme

Prvo trebamo da pitamo da li je kliknuto na dugme, pa tek onda da radimo nesto dalje

if(isset($_POST["btnProvera"])) { //... }

Dalji korak je preuzimanje tih podataka, pa zatim rad sa tim podacima

$ime = $_POST["nameIme"];

----------

-Funkcije za rad sa datumom i vremenom

date("d m Y"); - vraca danasnji datum, dan mesec godina

date("H i s"); - trenutno vreme, sati, minuti, sekunde

date("D"); - dan u nedelji, skracen naziv, Fri

date("l"); - dan u nedelji, pun naziv, Friday

date("w"); - dan u nedelji, numericki, 0 - 6 (0 - Monday)

date("M"); - mesec, skracen naziv, Jan

date("F"); - mesec, pun naziv, January

Da bi smo mogli da vrsimo bilo kakva poredjenja u zavisnosti od toga sta nam je potrebno, bitno je da datum pretvorimo u broj tj. sekunde kako bi se moglo nesto raditi

time(); - trenutno vreme u sekundama

mktime($hour, $minute, $second, $month, $day, $year); - vratice vreme u sekundama, obavezni parametri

Izracunavanje razlike trenutnog i proslog vremena u danima:

$trenutnoVreme = time();
$prosloVreme = mktime(12, 25, 35, 01, 15, 2021);
$razlikaSekunde = $trenutnoVreme - $prosloVreme;
$razlikaDani = round($razlika / 60 / 60 / 24);

strtotime("now"); - vraca trenutno vreme u sekundama

date(d m Y, $vreme); - vraca dan mesec i godinu za dato vreme u sekundama

Izracunavanje sledece nedelje na dva nacina:

$sledecaNedelja = time() + (7 * 60 * 60 * 24);
date("d m Y", $sledecaNedelja);

$sledecaNedelja = strtotime("+1 week");
date("d m Y", $sledecaNedelja);

----------

-Obrada podataka iz formulara PHP-om

Dobro je sve potrebne funkcije u jednom fajlu funkcije.php, a taj fajl includeovati gde treba

Dropdown lista:
Funkcije mozemo napraviti u posebnom php fajlu, pa taj fajl include, pa funkciju pozvati gde treba, ili mozemo u okviru te stranice da pravimo funkcije pa ih pozovemo
Ove cemo podatke generalno dobijate iz baze podataka

<select>
	<option value="0">Izaberite:</option>
	<?php ispisPadajuceListe(); ?>
</select>

function ispisPadajuceListe() {
	$niz = [
		0 => [ "id" => 1, "naziv" = "IT"],
		1 => [ "id" => 2, "naziv" = "KT]
	];
	$ispis = "";
	foreach($niz as $element) {
		$ispis .= "<option value='".$element['id']."'>".$element					['naziv']."</option";
	}
}

Ovo se moze uraditi i za checkbox

function ispisCheckboxListe() {
	$niz = [
		0 => [ "id" => 1, "naziv" => "PHP"],
		1 => [ "id" => 2, "naziv" => "JavaScript"]
	];
	$ispis = "";
	foreach($niz as $element) {
		$ispis .= "<input type='checkbox' value='".$element['id']."' name='jezici		[]'>".$element['naziv'];
	}
}

Moze se uraditi i za radio button elemente

function ispisRadioListe() {
	$niz = [
		0 => [ "id" => 1, "naziv" => "Backend"],
		1 => [ "id" => 2, "naziv" => "Frontend"]
	];
	$ispis = "";
	foreach($niz as $element) {
		$ispis .= "<input type='radio' name='zanimanje' value='".$elmenet['id']."'>".		$element['naziv'];
	}
}

Posto vidimo da je struktura ista, ovo sve mozemo u okviru jeden funkcije
Niz ce u praksi uvek biti niz elemenata koji su dohvaceni iz baze upitom (select)

// $niz = dohvatiIzBaze();

$nizSmerovi = [];
$nizJezici = [];
$nizZanimanja = [];

function ispisListe($niz, $tipElementa, $nameAtribut=null) {
	$ispis = "";
	foreach($niz as $element) {
		if($tipElementa == "ddl") {
			$ispis .= "<option value='".$element['id']."'>".$element					['naziv']."</option";
		}
		if($tipElementa == "chb") {
			$ispis .= "<input type='checkbox' value='".$element['id']."' 			name='jezici[]'>".$element['naziv'];
		}
		if($tipElementa == "rb") {
			$ispis .= "<input type='radio' name='zanimanje' value='".$elmenet			['id']."'>".$element['naziv'];
		}
	}
	return $ispis;
}

Poziv u zavisnosti gde nam treba:

echo ispisListe($nizSmerovi, "ddl");
echo ispisListe($nizSmerovi, "chb", "jezici[]");
echo ispisListe($nizZanimanja, "rb", "zanimanje");

Pravljenje dropdown listi za dan, mesec, godinu

function ispisDatuma($pocetnaVrednost, $krajnjaVrednost) {
	$ispis = "";
	for($i = $pocetnaVrednost; $i <= $krajnjaVrednost; $i++) {
		$ispis .= "<option value='".$i."'>".$i."</option>";
	}
	return $ispis;
}

Ispis

echo ispisDatuma(1, 31); // dan
echo ispisDatuma(1, 12); // mesec
echo ispisDatuma(1940, date("Y")); // godina

-Provera podataka iz forme
Prvo je potrebno proveriti da li je kliknuto na dugme
Kod checkbox i radiobutton elemenata, potrebno je proveriti da li su uopste cekirani, pa tek onda pokupiti vrednost

if(isset($_POST['btnProvera'])) {
	// idu name atributi
	$username = $_POST['username'];
	$email = $_POST['email'];
	$smer = $_POST['ddlSmer'];
	$jezici = isset($_POST['chbJezici']) ? $_POST['chbJezici'] : "nije cekirano";
	$zanimanje = isset($_POST['rbZanimanje']) ? $_POST['rbZanimanje'] : "";
	$dan = $_POST['ddlDan'];
	$mesec = $_POST['ddlMesec'];
	$godina = $_POST['ddlGodina'];

	$podaci = [];
	$greske = [];

	if(empty($username)) {
		array_push($greske, "Niste uneli username");
	}
	else {
		array_push($podaci, $usernmane);
	}
	
	// ista provera za $email

	if($smer == "0") {
		array_push($greske, "Niste izabrali smer");
	}
	else {
		array_push($podaci, $smer);
	}

	if($jezici == "") {
		array_push($greske, "Niste cekirali jezik");
	}
	else {
		array_push($podaci, implode(", ", $jezici));
	}

	if($zanimanje == "") {
		array_push($greske, "Niste cekirali zanimanje");
	}
	else {
		array_push($podaci, $zanimanje);
	}
	
	if($dan == 0 || $mesec == 0 || $godina == 0) {
		array_push($greske, "Morate izabrati dan mesec i godinu");
	}
	else {
		array_push($podaci, $dan . "-" . $mesec . "-" . $godina);
	}

	$ispis = "<ul>";

	if(count($greske) != 0) {
		foreach($greske as $g) {
			$ispis .= "<li>" . $g . "</li>";
		}
	}
	else {
		foreach($podaci as $p) {
			// upis u bazu
			$ispis .= "<li>" . $p . "</li>";
		}
	}
	
	$ispis .= "</ul>";

	echo $ispis;
}
else {
	echo "Nije dozvoljen pristup stranici";
	// redirekcija na stranicu 404 ili tako nesto
}

----------

-Obrada podataka iz forme JS i slanje PHP-u

Primer1:
Ovo nije potpuna zastita, vec neka bazna provera JS, pa neka bazna provera PHP

<form action="obrada.php" method="POST" onSubmit="return provera()">
	//...
	// potrebni i id i name atributi, id za javascript, name za php
	// koristi se submit dugme
</form>

function provera() {
	let ime = document.querySelector("#nameId");
	let dropdown = document.querySelector("#dropdownId");
	let radio = document.querySelectorByName("radioName");
}

// regularni izrazi, kada se oni pisu proverava se sa njima, a ovo je bazna provera bez njih

let brojac = 0;

if(ime.value == "") {
	brojac++;
}
if(dropdown.value == "0") {
	brojac++;	
}
let radioVrednost = "";
for(let i = 0; i < radio.length; i++) {
	radioVrednost = radio[i].value;
	break;
}
if(radioVrednost == "") {
	brojac++;
}
if(brojac != 0) {
	return false;
}
else {
	return true;
}


if(isset($_POST["buttonName"])) {
	$ime = $_POST["imeName"];
	$dropdown = $_POST["dropdownName"];
	$radio = $_POST["radioName"];

	// regularni izrazi su takodje potrebi, isti kao i za js, samo drugi metod pozivanja
	// ovo je sad neka bazna provera
	
	// za radio, check i dropdown bi se u realnoj situaciji dohvatili podaci iz baze 		// ako se vrednost poklapa sa nasom vrednoscu iz baze, onda je dobro
	// ovo se moze uraditi sa for petljom ili funkcijom in_array
	$nizDropdown = [1, 2, 3];
	$nizRadio = ["vrednos1", "vrednost2"];
	
	$brojac = 0;
	if($ime == "") {
		$brojac++;
	}
	if(!in_array($dropdown, $nizDropdown)) {
		$brojac++;
	}
	if(!in_array($radio, $nizRadio)) {
		$brojac++;
	}
	
	if($brojac != 0) {
		// redirekcija 
		header("Location: index.php");
	}
	else {
		// upis u bazu
		upis($ime, $dropdown, $radio);
	}
}

Primer2:

// Za formu sve isto
// koristi se button dugme
<form></form>

$(document).ready(function() {
	$(document).on('click', '#buttonId', function() {
		let ime = $('#imeId');
		let dropdown = $('#dropdown');
		let radio = $('input[name=radioName]:checked');

		let regexIme = /^[A-Z][a-z](2,14)$/;
		// let regexImePrezime = /^[A-Z][a-z]{2,14}(\s[A-Z][a-z]{2,14})+$/;
		// let regexAdresa = /^([A-Z]|[1,9]{1,5})[A-Za-z\d\-\.\s]+$/;

		let brojac = 0;

		if(regexIme.test($(ime).val())) {
			brojac++;
			// Klasa error moze da bude bilo sta, npr border: 1px solid red;
			$(ime).addClass('error');
		}
		else {
			$(ime).removeClass('error');
		}
		
		if($(dropdown).val() == 0) {
			brojac++;
			$(dropdown).addClass('error');
		}
		else {
			$(dropdown).removeClass('error');
		}

		// za radio, ako je selektovano vratice 1, ako nije onda 0
		if($(radio).length == 0) {
			brojac++;
			$(radio).addClass('error');
		}
		else {
			$(radio).removeClass('error');
		}

		if(brojac == 0) {
			let podaci = [
				"ime": $(ime).val(),
				"dropdown": $(dropdown).val(),
				"radio": $(radio).val(),
				"btn": true // ovo nam treba za php isset - button
			];

			$.ajax({
				url: "obrada.php",
				method: "post",
				data: podaci,
				dataType: "json",
				success: function(result) {
					console.log(result);
				},
				error: function(xhr) {
					console.log(xhr);
				}
			})
			
		}
	})
})

obrada.php
// Sada se dohvataju podaci iz JavaScripta, koji su prosledjeni ajaxom u paketu data
// Umesto isset - button, moze se koristiti i if($_SERVER['REQUEST_METHOD'] == 'POST')

header('Content=type: application/json');
if(isset($_POST["btn"])) {
	$ime = $_POST["ime"];
	$dropdown = $_POST["dropdown"];
	$radio = $_POST["radio"];
	$odgovor = "";
	$statusniKod = "";

	// regularni izrazi apsolutno isti kao i za javascript
	$regexIme = '/^[A-Z][a-z](2,14)$/';

	// ovo ce biti podaci iz baze
	$nizDropdown = [1, 2, 3];
	$nizRadio = ["v1", "v2"];
	
	$brojac = 0;
	
	if(!preg_match($regexIme, $ime)) {
		$brojac++;
	}
	
	if(!in_array($dropdown, $nizDropdown)) {
		$brojac++;
	}

	if(!in_array($radio, $nizRadio)) {
		$brojac++;
	}

	if($brojac != 0) {
		$odgovor = ["poruka" => "Greska prilikom obrade podataka!"];
		$statusniKod = 422;
	}
	else {
		// upis podataka u bazu
		// funkcija upisUBazu posle INSERT ce nam vratiti true ili false
		$upis = upisUBazu($ime, $dropdown, $radio);

		if($upis) {
			$odgovor = ["poruka" => "Podaci su upisani u bazu!"];
			$statusniKod = 201;
		}
		else {
			$odgovor = ["poruka" => "Greska prilikom upisa u bazu!"];
			$statusniKod = 500;
		}
	}

	echo json_encode($odgovor);
	http_response_code($statusniKod);
}

Sada dodatno mozemo imati nov div unutar html
<div id="odgovor"></div>

Unutar JS, konkretno success svojstva

success: function(result) {
	$("odgovor").html(<p class="">$(result.poruka)</p>);
}

error: function(xhr) {
	$("odgovor").html(<p class="">$(xhr.responseText)</p>);
	if(xhr == 500) {
		// uradicemo nesto
	}
}

-Upis u bazu podataka

Ovo je sledeci korak

127.0.0.1/phpmyadmin

Kartica Databases, upisujemo ime baze, biramo utc8_unicode_ci (ovo ce biti obavezno i za baze, i za tip polja...)

Bitna je dobra organizacija baze i svaki podatak koji ce se ponavljati i koji ima vise vrednosti treba da se organizuje u novu zasebnu tabelu (grad, drzava, pol)

Kod imenovanja kolona u bazi, potrebno je pisati drugaciju sintaksu nego u php
Ako smo u php koristili camelcase, onda u bazi koristimo donju crtu

Dobra je praksa ne pisati samo npr id, naziv vec id_grad, naziv_grad

Primarni kljuc treba da bude Primary i Auto Increment (AI)

Ukoliko imamo tekstualna polja, za manja koristimo char (npr za pol M ili Z), za veca varchar, a za vece kolicine tekstova text (npr za polje textarea)

Kartica Browse sluzi za pregled tabele
Kartica Structure sluzi da se pregleda struktura tabele
Kartica SQL sluzi za pisanje upita

Kada ubacujemo nove vrednost i u tabelu (insert) kolonu id cemo uvek ostavljati praznu, jer smo prethodno izabrali auto increment

Ukoliko smo napravili neku gresku prilikom kolone ili unosa polja uvek mozemo to da editujemo

Kada neko polje izbrisemo, taj id vise ne postoji, i sledeci unos ce biti za 1 veci od poslednjeg, a nece popuniti to mesto

Vezu sa drugim tabelama definisemo tako sto u glavnoj tabeli ubacimo novu kolonu koja ce imati isti naziv id kao i spoljna tabela, ali necemo namestiti primary key vec INDEX
Sada odlazimo na karticu More pa Designer i pravimo vezu, sa leve strane na panelu biramo create relationship, select referenced key (primaran kljuc), select foreign key (spoljni kljuc) i tako se napravila veza
Sa leve strane imamo save page kako bi sacuvali trenutni izgled, da nam se tabele ne razbacaju
Sada kada dodajemo novu kolonu u glavnoj tabeli, za id sekundarne tabele mozemo samo da izaberemo id koji se nalazi u toj sekundarnoj tabeli

----------

-CRUD operacije

Primer za povezivanje tabela: proizvodi i kategorije
Jedan proizvod moze imati samo jednu kategoriju, dok jedna kategorija moze imati vise proizvoda
Zato cemo u tablu proizvod ubaciti id kategorije
To cemo vezati relacijom tako sto ce primarni kljuc biti ID za tabelu kategorija, a spoljni kljuc ce biti ID kategorije u tabeli proizvod

CASCADE - kada se izbrise kategorija, izbrisace se svi proizvodi sa tom kategorijom (lose za prodavnicu, dobro za postove, npr izbrise se bela tehnika izbrisu se svi proizvodi)
RESTRICT - kada pokusamo da izbrisemo kategoriju, ukoliko ima proizvod nece se dozvoliti brisanje (dobro za bezbednost)

Prvo trebamo da dizajniramo bazu podataka, pa tek da krenemo sa projektom
Naravno dozvoljene su sitne izmene kasnije, ali od baze nam zavise svi podaci za nas sajt

connection.php

// Definisu se konstante

define("SERVER", "localhost");
define("DATABASE", "imeBaze");
define("USERNAME", "root");
define("PASSWORD", "");

try {
	// Definise se konekcija pomocu objekta PDO
	$con = new PDO("mysql:host=".SERVER.";dbname=".DATABASE.";charset=utf8", USERNAME,
	PASSWORD);
	// Definise se nacin dohvatanja podataka pomocu fetch obj
	$con -> setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
	// Definise se nacin obrade gresaka pomocu errmode
	$con -> setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
}
catch (PDOException $ex) {
	echo $ex -> getMessage();
}

Bice nam potreban <a> link koji ce voditi do stranice unos.php za unos
Ona ce imati includovan header i footer, ali i includovanu konekciju
Imacemo formu koja takodje treba da ima proveru js i php

unos.php

// include header, footer, connection, functions

$kategorije = vratiSve("kategorija");
// var_dump($kategorije); - provera da li su dohvaceni podaci

<form action="models/obrada-forme-za-unos.php" method="post">
	<select name="ddlKategorija">
		<option value="0">Izaberite</option>
		<?php
		// Prvi nacin
		foreach($kategorije as $kat) {
			echo "<option value='".$kat->id."'>".$kat->naziv."</option";
		}
		 ?>
		// Drugi nacin
		<?php foreach($kategorije as $kat) : ?>

		<option value="<?= $kat->id ?>"<?= $kat->naziv ?>"</option>"
		
		<?php endforeach; ?>
		// Polje za unos naziva proizvoda/posta
		<input type="text" id="naziv" name="naziv" />
		// Polje button tipa submit
		<button type="submit" name="button" id="button">Unesi</button>
	</select>
</form>
// Ovo smo obradili kasnije, kroz url se prenosi, ukoliko postoji greska, ispisace
<?php
	if(isset($_GET['greskaKlijent'])) {
		echo "<p>Ispravite podatke za unos.</p>";
	}
?>
<?php
	if(isset($_GET['greskaServer'])) {
		echo "<p>Ima problema na serveru, prilikom upisa u bazu.</p>";
	}
?>
<?php
	if(isset($_GET['uspeh'])) {
		echo "<p>Uspesno ste uneli podatke u bazu.</p>";
	}
?>


Imamo i stranicu za prikaz
Ne moze se koristiti obicna funkcija vratiSve jer su nama potrebni postovi sa nazivima kategorija

prikaz.php

// include header, footer, connection, functions

$proizvodi = vratiProizvode();
// var_dump $proizvodi;
$kategorije = vratiSve("kategorija");

// Zelimo i filtriranje

<select id="ddlKat">
	<option value="0">Podrazumevani prikaz</option>
	<?php
	foreach($kategorije as $kategorija) {
		echo "<option value='".$kategorija->id."'>".$kategorija->naziv."</option>";
	}
 	?>
</select>

if(count($proizvodi) == 0) {
	echo "<p>Nema proizvoda</p>";
}
else {
	echo "<table class="table">
		<tr> <th>Redni broj</th> <th>Naziv</th> <th>Kategorija</th> </tr>";
	$rb = 1;
	foreach($proizvodi as $proizvod) {
		// ovo sve treba unutar jednog echo (mozda moze i ovako)
		echo "<td>".$rb."</td>";
		echo "<td>".$proizvod->naziv_proizvod."</td>";
		echo "<td>".$proizvod->naziv_kategorija."</td>";
		// Dodatno za brisanje i editovanje
		echo "<td><a href='#' data-idproizvod='".$proizvod->id_proizvod						."'>Brisanje</a></td>;
		echo "<td><a href='#' data-idproizvod='".$proizvod->id_proizvod						."'>Editovanje</a></td>;
		// za datum linija ispod
		// echo "<td>".date('d. m. Y.', strtotime($proizvod->datum))."</td>";
		$rb++;
	}
}

// Div za kasnije kada smo odradili filtriranje
<div id="prikaz"></div>




Unutar ovog fajla ce nam biti sve funkcije

functions.php

function vratiSve($nazivTabele) {
	global $con;
	$upit = "SELECT * FROM $nazivTabele";
	$podaci = $con -> query($upit) -> fetchAll();
	return $podaci;
}

function unos($naziv, $idKategorija) {
	$global $con;
	$upit = "INSET INTO proizvod(naziv, id) VALUES(:naziv, :id)";
	
	$unos = $con -> prepare($upit);
	$unos -> bindParam(":naziv", $naziv);
	$unos -> bindParam(":id", $idKategorija);

	$rezultat = $unos -> execute();
	return $rezultat;
}

function vratiProizvode() {
	global $con;
	$upit = "SELECT * FROM proizvod p JOIN kategorija k ON p.id_kat = k.id_kat";
	$podaci = $con -> query($upit) -> fetchAll();
	return $podaci;
}

function vratiProizovideZaKategoriju($idKat) {
	global $con;
	$upit = "SELECT * FROM proizvod p JOIN kategorija k ON p.id_kat = k.id_kat WHERE 	p.id_kat = :id";

	$select = $con -> prepare($upit);
	$select -> bindParam(":id", $idKat);
	
	// U prethodnom slucaju nam je vraceno false/true, sada su podaci, pa nam treba 		fetchAll da ih dohvatimo sve
	
	$select -> execute();
	$podaci = $select -> fetchAll();
	return $podaci;
}

function brisanjePodataka($nazivTabele, $kolona, $id) {
	global $con;
	$upit = "DELETE FROM $nazivTabele WHERE $kolona = :id";
	$delete = $con -> prepare($upit);
	$delete -> bindParam(":id", $id);
	$result = $delete -> execute();
	return $result;
}

obrada-forme-za-unos.php

// Primer je radjen samo sa proverom u php, potrebna je i provera u JS

if(isset($_POST['button'])) {
	include "connection.php";
	include "functions.php";
	
	$idKategorija = $_POST['ddlKategorija']; // selektovana vrednost ce biti nas id
	$naziv = $_POST['naziv']; // upisan naziv ce biti naziv proizvoda

	// provera
	
	$brojGresaka = 0;

	// mi cemo obicnu proveru, ali treba regex za $naziv
	
	if($naziv == "") {
		$brojGresaka++;
	}
	
	// provera za ddl listu treba biti da value ne bude 0
	// ali takodje treba i da pripada nekom od id u nasoj tabeli kategorija
	// zato cemo prvo da izvucemo sve ID kategorija iz nase baze
	
	$kategorije = vratiSve("kategorija");
	$nizIdKategorija = [];
	foreach($kategorije as $kat) {
		$nizIdKategorija[] = $kat -> id;
	}
	
	if(!in_array($idKategorija, $nizIdKategorija)) {
		$brojGresaka++;
	}

	if($brojGresaka != 0) {
		// redirekcija i vracanje niza gresaka korisniku
		header('Location: ../unos.php?greskaKlijent=1');
	}
	else {
		$unos = unosPostova($naziv, $idKategorija);
		if($unos) {
			header("Location: ../unos.php?uspeh=1");
		}
		else {
			header("Location: ../unos.php?greskaServer=1");
		}
	}
}
else {
	// Redirekcija
	header('Location: ../404.php');
}

Ova stranica je za filtriranje uz pomoc javascripta

filtriranje.php

// Prvo provera da li je korisnik pristupio preko liste

header('Content-type: application/json');

if($_SERVER['REQUEST_METHOD'] == 'POST') {
	// include connection, functions
	
	$idKat = $_POST['id']; // ovo je vrednost iz JS(data)

	$proizvodi = "";

	// Ovde moze doci do serverske greske, pa cemo zato pisati try i cathc blokove

	try {
		if($idKat == "0") {
			$proizvodi = vratiProizvode();
		}
		else {
			$proizvodi = vratiProizovideZaKategoriju($idKat);
		}
		echo json_encode($proizvodi);
		http_response_code(200);
	}
	catch(PDOException $ex) {
		http_response_code(500);
	}
}
else {
	// redirekcija, greska
	http_response_code(404);
}

Stranica brisanje.php za brisanje proizvoda, sablonski deo kada se radi sa ajaxom, slicno kao i za filtriranje

brisanje.php

header('Content-type: application/json');

if($_SERVER['REQUEST_METHOD'] == 'POST') {
	// include connection, functions
	
	$idProizvod = $_POST['id']; // ovo je vrednost iz JS(data)

	// Ovde moze doci do serverske greske, pa cemo zato pisati try i cathc blokove

	$proizvodi = "";

	try {
		$brisanje = brisanjePodataka("proizvod", "id_proizvod", $idPost);
		if($brisanje) {
			$proizvodi = vratiProizvode();
		}
		echo json_encode($proizvodi);
		http_response_code(200);
	}
	catch(PDOException $ex) {
		http_response_code(500);
	}
}
else {
	// redirekcija, greska
	http_response_code(404);
}

Za filtriranje, brisanje, editovanje kod stranice prikaz.php moramo imati i javascript (ajax)

main.js

$(document).ready(function () {
	// filtriranje po kategoriji
	$(document).on('change', '#ddlKategorija', function() {
		let idKat = $('ddlKategorija').val();
		
		$.ajax({
			url: "models/filtriranje.php",
			method: "post",
			data: {
				id: idKat
			},
			dataType: "json",
			success: function(result) {
				// console.log(result);
				prikaziProizvode(result);
			},
			error: function(xhr) {
				console.log(xhr);
			}
		})
	})
	// brisanje kada se klikne na neki element koji ima klasu .brisanje-postova
	$(document).on('click', '.brisanje-postova', function(e) {
		e.preventDefault(); // sprecavanje primarne funkcije linka (redirekcija)
		let idProizvod = $(this).data('idproizvod'); // dohvatamo taj proizvod na 									koji je kliknuto
		$.ajax({
			url: "models/brisanje.php",
			method: "post",
			data: {
				id: idProizvod
			},
			dataType: "json",
			success: function(result) {
				// console.log(result);
				prikaziProizvode(result);
			},
			error: function(xhr) {
				console.log(xhr);
			}
		})
	}
})

function prikaziProizvode(nizProizvoda) {
	let html = "";
	if(nizProizvoda.length) {
		html += '<p>Nema proizvoda u bazi podataka</p>';
	}
	else {
		html += '<table> // Ovde bi isli tr th tagovi';
		let rb = 1;
		for(let proizvod of nizProizvoda) {
			// za datum dodatno
			// let datumNiz = proizvod.datum.split(" ");
			// let datum = datumNiz[0].split("-");
			// let datumIspis = datum[2] + ". " + datum[1] + ". " + datum[0];
			html += '<tr>
				<td>${rb}</td>
				<td>${proizvod.naziv_proizvod}</td>
				<td>${proizvod.naziv_kategorija}</td>
				<td><a href="#" data-				idproizvod="${proizvod.id_proizvod}">Obrisi</a></td>
				// dodatno datum
				// <td>${datumIspis}</td>
				</tr>';
		rb++;
		}
	html += '</table>';
	}
	$('#prikazProizvoda').html(html);
}

-Ispis:

Ispis moze biti tako sto html pisemo unutar php:

<?php
	foreach($elementi as $e) {
		echo "<option>".$e->naziv."</option>";
	}
?>

Ispis moze biti tako sto pisemo php unutar html:
Dve tacke (:)  predstavljaju otvaranje viticastih zagrada, endforeach; znaci zatvaranje viticastih zagrada
To pisemo unutar <?php ?>, a izmedju toga pisemo normalno html
Unutar html opet mozemo da otvorimo php ali na drugaciji laksi nacin <?= ?>, gde nam ovo jednako znaci echo

<?php foreach($elementi as $e) : ?>
	<option><?= $e->naziv ?></option>
<?php endforeach; ?>

----------

-Registracija i logovanje

Registracija predstavlja klasican insert, a logovanje klasican select

Prvo je potrebno kreiranje baze

Korisnici:
Obavezna polja: id, ime i prezime, email, lozinka, datum_registracije, uloga?
Opciona polja: adresa?

Posto je adresa opciona, bolje je da imamo posebnu tabelu za adresu, jer je cesto moguce da cemo za nju imati null vrednost
Posto nece svaki korisnik da ima adresu, onda taj id adrese necemo dodavati u tabelu korisnici, jer je opciona

Korisnici
id - int 256 unique auto increment primary
ime i  prezime - varchar 50
email - varchar 50 unique
lozinka - varchar 50 (bice kriptovana md5 - znaci moze i 32)
id_uloga - int 50 index
datum_registracije - timestamp(na nivou baze)

Adresa
id - int 256 unique auto increment primary
adresa - varchar 50
id korisnik - int 256 index

Uloga
id - int 50 auto increment primary
naziv - varchar 50 unique

Idemo na dizajner i pravimo vezu
Relationship - referenced(id korisnik u korisnici), forgein (id korisnik u adresa), kaskadno brisace (cascade)
Relationship - referenced(id uloga u uloga), forgein (id uloga u korisnici)

Ukoliko se desi da naknadno moramo da dodamo neku vezu, a vec imamo upisane podatke, onda trebamo da hard-codujemo podatke tj. da ih sami upisemo 

Ukoliko se desi da se lozinka zaboravi, promenicemo je na nivou baze, i sada cemo dodatno za tu kolonu da stavimo md5 da je sama baza sifruje

Imacemo registracija.php i logovanje.php, kao i odjava.php

functions.php

function unosKorisnika($imePrezime, $email, $sifrovanaLozinka, $idUloga) {
	global $con;
	$upit = "INSERT INTO korisnici(ime_prezime, email, lozinka, id_uloga) VALUES 		(:imePrezime, :email, :lozinka, :idUloga)";
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(':imePrezime', $imePrezime);
	$priprema -> bindParam(':email', $email);
	$priprema -> bindParam(':lozinka', $sifrovanaLozinka);
	$priprema -> bindParam(':idUloga', $idUloga);
	$rezultat = $priprema -> execute();
	return $rezultat;
}

function unosAdrese($idKorisnik, $adresa) {
	global $con;
	$upit = 'INSERT INTO adresa(adresa, id_korisnik) VALUES(:adresa, :id)';
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(':adresa', $adresa);
	$priprema -> bindParam(':id', $idKorisnik);
	$rezultat = $priprema -> execute();
	return $rezultat;
}

function proveraLogovanje($email, $sifrovanaLozinka) {
	global $con;
	$upit = 'SELECT * FROM korisnik k JOIN uloga u ON k.id_uloga = u.id_uloga WHERE 	k.email = :email AND k.lozinka = :lozinka';
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(":email", $email);
	$priprema -> bindParam(":lozinka", $sifrovanaLozinka);
	$priprema -> execute();
	$rezultat = $priprema -> fetch();
	return $rezultat;
}

registracija.php 

<form action="">
	<input type="text" name="imePrezime" id="imePrezime" />
	<input type="email" name="email" id="email" />
	<input type="password" name="lozinka" id="lozinka" />
	<input type="text" name="adresa" id="adresa" />
	<input type="button" name="btnReg" id="btnReg" value="Registracija "/>
</form>
<div id="odgovor"></div>

$(document).ready(function() {
	$(document).on('click', '#btnReg', function() {
		let imePrezime, email, lozinka, adresa;
		imePrezime = $('#imePrezime');
		email = $('email');
		lozinka = $('password');
		adresa = $('adresa');
		
		// provera podataka regularnim izrazima
		// dodavanje klasa ako nije dobro i brisanje ako jeste
		// jedan primer samo da proverimo da li je polje popunjeno

		let brojGresaka = 0;
		
		if($(imePrezime).val() == "") {
			brojGresaka++;
			$(imePrezime).addClass('errorKlasa');
		}
		else {
			$(imePrezime).removeClass('errorKlasa');
		}

		if(brojGresaka == 0) {
			let podaci = {
				imePrezime: $(imePrezime).val();
				email: $(email).val();
				lozinka: $(lozinka).val();
			}
			if($(adresa).val() != "") {
				podaci.adresa = $(adresa).val();
			}

			// ajaxom saljemo podatke, do stranice koja vrsi pozadinu 			registracije i razlikuje se od registracija.php
			
			$.ajax({
				url: "models/registracijaLogika.php",
				method: "post",
				data: podaci,
				dataType: "json",
				success: function(result) {
					console.log(result);
					$('#odgovor').html('<p>${result.poruka}</p>')
				},
				error: function(xhr) {
					console.log(xhr);
					// if 500... error
					// if 404... error
				}
			})
		}
	})
})

registracijaLogovanje.php

header("Content-type: application/json");
if($_SERVER['REQUEST_METHOD'] == 'POST') {
	include "connection.php";
	include "functions.php";

	try {
		$imePrezime = $_POST['imePrezime'];
		$email = $_POST['email'];
		$lozinka = $_POST['lozinka'];
		$adresa = isset($_POST['adresa']) ? $_POST['adresa'] : "";

		// provera podataka
		
		$sifrovanaLozinka = md5($lozinka);

		$idUloga = 2;

		// Mi cemo uvek da kazemo da mu je uloga obican korisnik
		// Ukoliko zelimo da neko bude admin, sami cemo hard code u bazi
		// da mu promenimo idUloga = 1, kako bi bio admin

		$unosKorisnika = unosKorisnika($imePrezime, $email, $sifrovanaLozinka, 				$idUloga);

		if($unosKorisnika) {
			// ukoliko je uneo adresu
			if($adresa != "") {
				// funkcija koja vraca podatke za tog korisnika (email)
				// rizicniji nacin sa last insert
				$idKorisnik = $con -> lastInsertId();

				$unosAdrese($idKorisnik, $adresa);
			}
			
			$odgovor = ["poruka" => "Uspesan unos"];
			echo json_encode($odgovor);
			http_response_code(201);
		}
		// else{} nije uspesan unos
	}
	catch(PDOException $ex) {
		http_response_code(500);
		// var_dump($ex);
	}
}
else {
	http_response_code(404);
}

logovanje.php

session_start();
<form action="">
	<input type="text" name="email" id="logEmail" />
	<input type="password" name="lozinka" id="logLozinka" />
	<input type="button" name="btnLog" id="btnLog" value="Logovanje" />
</form>
<div id="ispis">
<?php
// Pitamo da li je ulogovan?
if(isset($_SESSION['korisnik'])) {
	// var_dump($_SESSION['korisnik']);
	$korisnik = $_SESSION['korisnik'];
	if($korisnik -> naziv == "admin") {
		echo "<a href='admin.php'>Stranica za admina</a>";
	}
	if($korisnik -> naziv == "korisnik") {
		echo "<a href='korisnik.php'>Stranica za korisnika</a>";
	}
}
?>
</div>

function ajaxCallBack(url, method, data, result) {
	$.ajax({
		url: url,
		method: method,
		data: data,
		dataType: "json",
		success: result,
		error: function(xhr) { console.log(xhr); }
	})
}

$(document).ready({
	$(document).on('click', '#btnLog', function() {
		let email, lozinka;
		email = $('#logEmail');
		lozinka = $('#logLozinka');
		
		let brojGresaka = 0;

		// provera

		if(brojGresaka == 0) {
			let podaci = { 
				email: $(email).val();
				lozinka: $(lozinka).val();
			}
			// funkcija callback samo da ne bi ponavljali kod
			ajaxCallBack("models/logovanjeLogika.php", "post", podaci, 
				function(result) {
					// pre ovoga jos i za link odjavu isti princip
					console.log(result);
					// ovo je da bi nam odmah prikazalo stranice
					if(result.nazivUloge == "admin") {
						$('#ispis').html('<a href="admin.php">"');
					}
					if(result.nazivUloge == "korisnik") {
						$('#ispis').html('<a href="korisnik.php"');
					}
				});
		}
	})
})

logovanjeLogika.php

session_start();
header("Content-type: application/json");
if($_SERVER['REQUEST_METHOD'] == 'POST') {
	include "connection.php";
	include "functions.php";

	try {
		$email = $_POST['email'];
		$lozinka = $_POST['lozinka'];
		// provera podataka

		$sifrovanaLozinka = md5($lozinka);

		$korisnikObj = proveraLogovanje($email, $sifrovanaLozinka);

		if($korisnikObj) {
			// da bi smo zapamtili da se korisnik logovao uvodimo sesije
			// sada opciono mozemo da izvlacimo iz objekta podatke koje zelimo
			// a mozemo cak i ceo objekat, sto je prakticno
			// $_SESSION['korisnik_id'] = $korisnikObj -> id_korisnik;
			
			$_SESSION['korisnik'] = $korisnikObj;
			
			$odgovor = ["nazivUloge"=>$korisnikObj -> naziv];
			echo json_encode($odgovor);
			http_response_code(200);
		}
	}
	catch(PDOException $ex) {
		http_response_code(500);
	}
}

U navbar tamo gde imamo linkove <a href="logovanje.php"> i <a href="registracija.php">
Prvo trebamo da na svakoj stranici session_start();
Na stranici index, logovanje, registracija (sve gde je ubacen navbar)

<?php
if(isset($_SESSION['korisnik'])) {
	echo "<a href='odjava.php'>Odjava</a>";
}
?>

odjava.php

session_start();
if(isset($_SESSION['korisnik'])) {
	unset($_SESSION['korisnik']);
	header('Location: logovanje.php');
}

Ostale su nam jos stranice za admina i korisnika
Nebitan je sadrzaj stranice, bitna je zastita
Pisacemo php unutar html

admin.php

session_start();

if(isset($_SESSION['korisnik'])) {
	$korisnik = $_SESSION['korisnik'];
	if($korisnik -> naziv == "admin") {
		// onda prikazi nesto za admina
	}
}

korisnik.php

session_start();

if(isset($_SESSION['korisnik'])) {
	$korisnik = $_SESSION['korisnik'];
	// admin ima vece privilegije pa i njemu mozemo da dozvolimo pristup
	// ovo je opciono, i zavisi od nas, nase logike, naseg sajta
	if($korisnik -> naziv == "korisnik") {
		// nesto za korisnika
	}
}

----------

-Update i upload fajlova

Ovo je nadovezivanje na sve prethodno (logovanje i registracija)

Prvo je potrebno logovanje i to logovanje admina

functions.php

function korisniciSaUlogom() {
	global $con;
	$upit = 'SELECT * FROM korisnici k JOIN uloga u ON k.id_uloga = u.id_uloga';
	$podaci = $con -> query($upit) -> fetchAll();
	return $podaci;
}
function dohvatiAdresuKorisnika ($id) {
	global $con;
	$upit = 'SELECT * FROM adresa WHERE id_korisnik = :id';
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(':id', $id);
	$priprema -> execute();
	$rezultat = $priprema -> fetch();
	return $rezultat;
}
function podaciOKorisniku($idKorisnik) {
	global $con;
	$upit = 'SELECT * FROM korisnici k JOIN uloga u ON k.id_uloga = u.id_uloga WHERE 	k.id_korisnik = :id';
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(':id', $idKorisnik);
	$priprema -> execute();
	$rezultat = $priprema -> fetch();
	return $rezultat;
}
function editovanjePodataka($imePrezime, $email, $sifrovanaLozinka, $idKorisnik) {
	global $con;
	$upit = "";
	if($sifrovanaLozinka != "") {
		$upit = "UPDATE korisnici SET ime_prezime = :imePrezime, email = :email, 		lozinka = :lozinka WHERE id_korisnik = :id";
	}
	$upit = "UPDATE korisnici SET ime_prezime = :imePrezime, email = :email, WHERE 	id_korisnik = :id";
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(":imePrezime", $imePrezime);
	$priprema -> bindParam(":email", $email);
	if($sifrovanaLozinka != "") {
		$priprema -> bindParam(":lozinka", $sifrovanaLozinka);
	}
	$priprema -> bindParam(":id", $idKorisnik);
	$rezultat = $priprema -> execute();
	return $rezultat; 
}
// Brisnaje moze za apsolutno sve
function brisanje($tabela, $kolona, $id) {
	global $con;
	$upit = "DELETE FROM $tabela WHERE $kolona = :id";
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(":id", $id);
	$rezultat = $priprema -> execute();
	return $rezultat;
}
function editovanjeAdrese($adresa, $idAdresa) {
	global $con;
	$upit = "UPDATE adresa SET adresa = :adresa WHERE id_adresa = :idAdresa";
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(":adresa", $adresa);
	$priprema -> bindParam("idAdresa", $idAdresa);
	$rezultat = $priprema -> execute();
	return $rezultat;
}
function upisFajla($novoImeFajla, $alt, $velicinaFajla, $tipFajla, $idKorisnik) {
	global $con;
	$upit = "INSERT INTO slika(putanja, alt, velicina, tip, id_korisnik)
	VALUES(:imeFajla, :alt, :velicina, :tip, :id)";
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(":imeFajla", $novoImeFajla);
	$priprema -> bindParam(":alt", $alt);
	$priprema -> bindParam(":velicina", $velicinaFajla);
	$priprema -> bindParam(":tip", $tipFajla);
	$priprema -> bindParam(":id", $idKorisnik);
	$rezultat = $priprema -> execute();
	return $rezultat;
}
function dohvatiSvePodatke($tabela) {
	global $con;
	$upit = "SELECT * FROM $tabela";
	$rezultat = $con -> query($upit) -> fetchAll();
	return $rezultat;
}
function podaciOSlici($idSlike) {
	global $con;
	$upit = "SELECT * FROM slika WHERE id_slika = :id";
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(":id", $idSlike);
	$priprema -> execute();
	$rezultat = $priprema -> fetch();
	return $rezultat;
}

admin.php

// include connection, functions

session_start();

if(isset($_SESSION['korisnik'])) {
	$korisnik = $_SESSION['korisnik'];
	if($korisnik -> naziv == "admin") {
		// onda prikazi nesto za admina
		$korisnici = korisniciSaUlogom();
		if(count($korisnici) != 0) {
			?> // zatvaramo php samo radi lakseg ispisa
			<table>
				<th>RB</th>
				<th>Ime i prezime</th>
				<th>Email</th>
				<th>Uloga</th>
				<th>Adresa</th>
				<th>Datum registracije</th>
			</table>
			<?php
			$rb = 1;
			foreach($korisnici as $korisnik) {
				echo '<tr>
					<td>'.$rb.'</td>
					<td>'.$korisnik -> ime_prezime.'</td>
					<td>'.$korisnik -> email.'</td>
					<td>'.$korisnik -> naziv.'</td>';
				// sada za adresu posto je ona opciona
				$adresa = dohvatiAdresuKorisnika ($korisnik -> id_korisnik);
				$adresaZaIspis = "";
				if($adresa) {
					$adresaZaIspis = $adresa;
				}
				else {
					$adresaZaIspis = "/";
				}
				// nastvaljamo ispis
				echo '<td>'.$adresaZaIspis.'</td>
					<td>'.date("d m Y", strtotime($korisnik -> 							datum_reg)).'</td>
					<td><a href="forma-izmena.php?			id='.$korisnik -> korisnik_id.'">Editovanje</a></td></tr>';
			}
		}
		else {
			echo <p>Nema podataka</p>';
		}
	}
}

Sada za izmenu trebaju biti podaci koje je korisnik vec uneo!
Primer: padajuca lista treba opet da ima selekciju gradova, ali da inicijalno bude njegov grad selektovan

forma-izmena.php

// include conneciton, functions

session_start();

if(isset($_SESSION['korisnik'])) {
	$korisnik = $_SESSION['korisnik'];
	if($korisnik -> naziv == "admin") {
		// onda prikazi nesto za admina
		if(isset($_GET['id'])) {
			// selektovanja id za korisnika na koji je kliknuto editovanej
			$idKorisnik = $_GET['id'];
			$korisnik = podaciOKorisniku($idKorisnik);
			if($korisnik) {
				// ovde ce biti forma sa podacima
				// sada imamo polje value, kao i action i method, i submit
				// jos jedno skriveno polje za prenos ID
				echo '<form action="editovanje.php" method="post">
				<input type="hidden" name="idKorisnik" value=".$idKorisnik." 				/>
				<input type="text" name="imePrezime" value=".$korisnik -					> ime_prezime."/>
				<input type="email" name="email" value=".$korisnik -> 						email."/>
				<input type="password" name="lozinka" />';
				// ponovo pitamo za adresu
				$adresa dohvatiAdresuKorisnika($korisnik -> id_korisnik);
				$adresaZaIspis = "";
				if($adresa) {
					$adresaZaIspis = $adresa;
				}
				echo '<input type="text" name="adresa" value=".				$adresaZaIspis." />
				<input type="submit" name="btnEdit" value="Editovanje" />
				</form>';
			}
		}
	}
	else {
		// redirekcija na 404
	}
}
else {
	// redirekcija na 404
}

Sada realizujemo logiku za editovanje, a to ce biti UPDATE podataka, gde je ID u tabeli isti kao ID koji cemo mi proslediti

editovanje.php

// include connection, functions

if(isset($_POST['btnEdit'])) {
	$idKorisnik = $_POST['idKorisnik'];
	$imePrezime = $_POST['imePrezime'];
	$email = $_POST['email'];
	$lozinka = $_POST['lozinka'];
	$adresa = $_POST['adresa'];
	
	// provera podataka, ponovo mora

	$brojGresaka = 0;
	
	if(brojGresaka == 0) {
		// prvo logiku za lozinku, da li je prazna
		$sifrovanaLozinka = "";
		if($lozinka != "") {
			$sifrovanaLozinka = md5($lozinka);
		}
		$update = editovanjePodataka($imePrezime, $email, $sifrovanaLozinka,		$idKorisnik);
		// sada imamo varijante za adresu
		// prilikom registracije nije imao, sada hoce da je unese (insert)
		// ako je imao adresu, a sada zeli da je promeni (update)
		// ako je imao adresu, a sada zeli da je izbrise (delete)
		if($update) {
			$adresaIzBaze = dohvatiAdresuKorisnika($idKorisnik);
			if($adresaIzBaze) {
				if($adresa == "") {
					// brisanje
					$izbrisiAdresu = brisanje("adresa", "id_adresa", $adresaIzBaze -> id_adresa);
				}
				else {
					// update
					$editAdrese = editovanjeAdrese($adresa, 					$adresaIzBaze -> id_adresa);
				}
			}
			else {
				// insert (uslov da nije prazna adresa
				if($adresa != "") {
					$unosAdrese = unosAdrese($idKorisnik, $adresa);
				}
			}
			// ako je prosao update
			header("Location: forma-izmena?id=".$idKorisnik);
		}
	}
	else {
		// ima gresaka
	}
}
else {
	// redirekcija na 404
}

Sada cemo da uradimo upload fajlova
Korisnik moze da unese sliku (nebitno da li je profilna, obicna)
Trebamo da imamo novu tabelu za to 
Sada ce nam trebati i nova globalna promenljiva $_FILES
Tabela slika: id_slika(int 255), putanja(varchar 100), alt(varchar 100), size(int 15), type(varchar 50), datum_upload(timestamp, current timestamp), id_korisnik(index)
Povezivanje: id_korisnik u korisnici primarni, id_korisnik u slika spoljni

korisnik.php

// include connection, functions

session_start();

if(isset($_SESSION['korisnik'])) {
	$korisnik = $_SESSION['korisnik'];
	// admin ima vece privilegije pa i njemu mozemo da dozvolimo pristup
	// ovo je opciono, i zavisi od nas, nase logike, naseg sajta
	if($korisnik -> naziv == "korisnik") {
		// nesto za korisnika
		?>
		// prekid php da bi ispisali formu
		<form action="upload.php" method="post" enctype="multipart/form-data">
			<input type="text" name="alt" />
			<input type="file" name="slika" />
			<input type="submit" value="Upload" name="upload" />
		</form>
		// ispis gresaka prilikom upload (pomocu sesija)
		<div id="ispis">
		<?php
		if(isset($_SESSION['greska-tip'])) {
			echo "<p>".$_SESSION['greska-tip']."</p>";
			unset($_SESSION['greska-tip']);
		}
		if(isset($_SESSION['greska-velicina'])) {
			echo "<p>".$_SESSION['greska-velicina']."</p>";
			unset($_SESSION['greska-velicina']);
		}
		?>
		</div>
	}
}
// Dodatno iscitavanje podataka - konkretno fajlova slika
<div>
if(isset($_SESSION['korisnik'])) {
	$korisnik = $_SESSION['korisnik'];
	if($korisnik -> naziv == "korisnik") {
		$slike = dohvatiSvePodatke("slika");
		if(count($slike) == 0) {
			echo "Nema fajlova/slika za datog korisnika";
		}
		else {
			foreach($slike as $slika) {
				// ispis/prikaz tih slika
				echo "<img src='assets/img_upload/'".$slika -> putanja." 					alt='".$slika -> alt."' />";
				// brisanje slika bi trebalo ajaxom
				// na casu radjeno samo php
				echo "<a href='izbrisi-sliku.php?id=".					$slika -> id_slika."'>Izbrisi</a>";
			}
		}
	}
}	
</div>


Stranica upload.php za logiku
$_FILES ima svoje argumente/metode

upload.php

// include connection, functions

session_start();

if(isset($_POST['upload'])) {
	$alt = $_POST['alt'];
	$fajl = $_FILES['fajl'];
	$imeFajla = $fajl['name'];
	$tmpFajla = $fajl['tmp_name'];
	$velicinaFajla = $fajl['size']; // u bajtovima
	$tipFajla = $fajl['type'];
	$greskeFajla = $fajl['error'];

	if($greskeSlike == 0) {
		// podatke o korisniku izvlacimo iz sesije definisane u korisnik.php
		$korisnik = $_SESSION['korisnik'];
		// ogranicenja za fajlove
		$brojGresaka = 0;
		$dozvoljeniTipoviFajla = ["image/jpg", "image/jpeg", "image/png"];
		if(!in_array($tipFajla, $dozvoljeniTipoviFajla)) {
			$brojGresaka++;
			$_SESSION['greska-tip'] = "Nedozvoljen tip fajla";
		}
		if($velicinaFajla > 200000) {
			$brojGresaka++;
			$_SESSION['greska-velicina'] = "Prevelika velicina fajla";
		}
		if($brojGresaka != 0) {
			// ima gresaka
			header("Location: korisnik.php");
		}
		else {
			// nema gresaka
			// zelimo da se slike skladise u posebnom folderu za upload
			// zelimo da se ime fajla uvek razlikuje
			// zato cemo nadovezati i funkciju time
			// paziti na putanju! (da li treba izaci iz trenutnog foldera ../)
			$putanja = "assets/img_upload/".time()."_".$imeFajla;
			// ime fajla za bazu
			$novoImeFajla = time()."_".$imeFajla;

			// za upload imamo funkciju
			if(move_uploaded_file($tmpFajla, $putanja)) {
				// uspesan upload
				// sada ide upis u bazu
				$upisFajla = upisFajla($novoImeFajla, $alt, 				$velicinaFajla, $tipFajla, $korisnik -> id_korisnik);
				if($upisFajla) {
					header("Location: korisnik.php");
				}
			}
		}
	}
}
else {
	// redirekcija 404
}

Fajl za brisanje slike (logika)
Treba izbrisati sliku iz baze i iz foldera

izbrisi-sliku.php

if(isset($_GET['id'])) {
	$idSlike = $_GET['id'];
	$slika = podaciOSlici($idSlike);

	// sada cemo da pitamo da li slika postoji pomocu file_exists
	$putanja = "assets/img_upload/".$slika -> putanja;
	if(file_exists($putanja)) {
		// postoji
		// sad aga birsemo pomocu funkcije unlink
		unlink($putanja);
		// sada treba brisanje iz baze, sa prethodnom funkcijom brisanje
		$brisanjeSlike = brisanje("slika", "id_slika", $idSlike);
		if($brisanjeSlike) {
			// uspesno brisanje
			header("Location: korisnik.php");
		}
	}
	else {
		echo "Ne postoji";
	}
}

----------

-Stranicenje

Kreiramo bazu

Baza primer: film, glumac, slika, film-glumac

Stranicenje bez ajaxa:

functions.php

// stari nacin bez stranicenja
function vratiFilmoveSaSlikom() {
	global $con;
	$upit = "SELECT * FROM movies m JOIN photos p ON m.photo_id = p.id";
	$rezultat = $con -> query($upit) -> fetchAll();
	return $rezultat;
}

// novi nacin za stranicenje
function vratiFilmoveSaSlikom($limit) {
	global $con;
	$l = $limit * 2;
	$upit = "SELECT * FROM movies m JOIN photos p ON m.photo_id = p.id LIMIT $l, 2";
	$rezultat = $con -> query($upit) -> fetchAll();
	return $rezultat;
}

// Spajanje tri tabele

function vratiGlumceZaFilm($id) {
	global $con;
	$upit = "SELECT * FROM movies m JOIN movie_actors ma ON m.id = ma.movie_id JOIN 	actors a ON ma.actor_id = a.id WHERE m.id = :id";
	$priprema = $con -> prepare($upit);
	$priprema -> bindParam(":id", $id);
	$priprema -> execute();
	$rezultat = $priprema -> fetchAll();
	return $rezultat;
}

function vratiBrojFilmova() {
	global $con;
	$upit = "SELECT COUNT(*) AS broj FROM movies";
	$rezultat = $con -> query($upit)->fetch();
	return $rezultat;
}

stranicenje-bez-ajaxa.php

// include connection, functions

// za stranicenje
$limit = isset($_GET['limit']) ? $_GET['limit'] : 0;

// stari nacin bez stranicenja
// $filmovi = vratiFilmoveSaSlikom();

// novi nacin sa stranicenjem
$filmovi = $vratiFilmoveSaSlikom($limit);

<div>
<?php
	if(count($filmovi) != 0) {
		echo "<table>
		<tr>
			<th>Redni broj</th>
			<th>Slika</th>
			<th>Naslov</th>
			<th>Opis</th>
			<th>Glumci</th>
		</tr>";
		$rb = 1;
		foreach($filmovi as $film) {	
			// Ova promenljiva je za opis
			// korisnik moze da procitamo malo, a ako zeli moze kasnije vise
			$descData = $film -> description;
			$desc = substr($film -> description, 0, 20);
			echo "<td>".$rb."</td>
				<td><img src='assets/images'".$film -> src." 							alt='".$film -> alt.'" /></td>
				<td>".$film -> title."</td>
				<td>".if(strlen($descData) <= 20) ? $desc : $desc."..." 				."</td>
				<td>".
					$glumci = vratiGlumceZaFilm($film -> id);
					foreach($glumci as $glumac) {
						."<p>".$glumac -> first_name."</p>".
					}
				."</td>;
		}
		</table>";
	}
?>
</div>

<div>
<?php
// paginacija (iz bootstrapa ili sami, html css kod)
// izvlacimo ukupan broj filmove(zapisa) iz baze
$brojFilmova = vratiBrojFilmova();
// zelimo prikaz 2 filma po stranici
$brojStranica = ceil($brojFilmova -> $broj / 2);

for($i = 0; $i < $brojStranica; $i++) {
	echo "
		<li><a href="stranicenje-bez-ajaxa.php?limit=".$i."">".$i + 1."</a></li>
	";
}

<li><a href="stranicenje-bez-ajaxa.php?"></a></li>
?>
</div>

Dodatno - drugi nacin dohvatanja kada imamo 3 tabele

$filmovi = vratiFilmoveSaSlikomIGlumcima();

function vratiFilmoveSaSlikomIGlumcima() {
	global $con;
	$filmovi = vratiFilmoveSaSlikom();
	foreach($filmovi as $film) {
		$glumci = vratiGlumceZaFilm($film -> id);
		// prosirili smo filmove sa jos jednim svojstvom glumci
		$film -> glumci = $glumci;
	}
	return $filmovi;
}

Stranicenje sa ajaxom:

Razlika je sto u a href necemo imati php fajl vec #, a imacemo atribut data-limit=".$i."

functions.php

// sve slicne funkcije

// Da definisemo koliko zelimo prikaza po stranici
define("OFFSET", 2);

function vratiFilmoveSaSlikom($limit = 0) {
	global $con;
	$upit = "SELECT * FROM movies m JOIN photos p ON m.photo_id = p.id LIMIT :limit, 	:offset";
	$priprema = $con -> prepare($upit);
	// moramo biti sigurni da je int
	$limit = ((int) $limit) * OFFSET;
	$priprema -> bindParam(":limit", $limit, PDO::PARAM_INT);
	$offset = OFFSET;
	$priprema -> bindaram(":offset", $offset, PDO::PARAM_INT);
	$priprema -> execute();
	$filmovi = $priprema -> fetchAll();
	foreach($filmovi as $film) {
		$film -> glumci = vratiGlumceZaFilm($film -> id);
	}
	return $filmovi;
}

function vratiBrojStranica() {
	$brojFilmova = vratiBrojFilmova();
	$brojStranica = ceil($brojFilmova -> $broj / OFFSET);
	return $brojStranica;
}

stranicenje-sa-ajaxom.php

// $limit = isset($_GET['limit']) ? $_GET['limit'] : 0;

// novi nacin sa stranicenjem
$filmovi = $vratiFilmoveSaSlikom();

$brojStranica = vratiBrojStranica();

<div class=".paginacija">
<?php
for($i = 0; $i < $brojStranica; $i++) {
	echo "
	<li><a href="#" data-limit='".$i."'>$i+1</a></li>
	";
}
?>
</div>

main.js

$(document).ready(function() {
	$(document).on('click', '.paginacija', function(e) {
		e.preventDefault();
		let limit = $(this).data('limit');
		let data = {
			limit: limit
		}
		ajaxCallBack("paginacija.php", "post", data, function(result) {
			// console.log(result);
			ispisiFilmove(result.filmovi, limit);
			ispisiStranice(result.brojStranica);
		})
	})
})

function ispisiFilmove(filmovi, limit) {
	let html = "";
	if(filmovi.length == 0) {
		html += "<p>Nema filmova</p>";
	}
	else {
		let rb = limit * 2 + 1; // ovo je da bi sledeca stranica pamtila redosled
		// ovde ide redni broj, naslov, opis, glumci
		html += "<table><tr><th></th></tr>";
		for(let film of filmovi) {
			html += "
			<td>${rb}</td>
			<td><img src="images/${film.src}" alt="${film.alt}" /></td>
			<td>${film.title}</td>
			<td>
				// sve isto za opis kao i za php
				// substring(0, 30);
				// if(desc.length < 30)
				${film.description}
			</td>
			<td>";
			for(let glumac of film.glumci) {
				html += ${glumac.first_name};
			}
			html += "</td>";
			rb++;
		}
		html += "</table>";
	}
	$("#prikaz").html(html);
}

function ispisiStranice(brojStranica) {
	html = "";
	for(let i = 0; i < brojStranica; i++) {
		html += '
			<li><a href="#" data-limit="${i}">${i+1}</a></li>
		';
	}
	$("#paginacija").html(html);
}

paginacija.php

// include connection, functions

header('Content-type: application/json');
if($_SERVER['REQUEST_METHOD'] == 'POST') {
	try {
		$limit = $_POST['limit'];
		$filmovi = vratiFilmoveSaSlikom($limit);
		$brojStranica = vratiBrojStranica();
		
		echo json_encode([
			'filmovi' => $filmovi,
			'brojStranica' => $brojStranica
		]);
		http_response_code(200);
	}
	catch(PDOException $ex) {
		http_response_code(500);
	}
}
else {
	http_response_code(404);
}




























